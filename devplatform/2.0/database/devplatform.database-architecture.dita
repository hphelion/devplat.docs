<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" ><topic xml:lang="en-us" id="DatabaseArchitecture ">
<title>Database Service Architecture</title>
<body>
  <section id="introduction">
    <p>The database service provides lifecycle services for both single instance and clustered
        databases for Percona MySQL, MongoDB, Redis, and Vertica. Lifecycle services include
        provisioning, configuration, patching, instance backups, and restores that can be
        administered from either a command-line interface, RESTful APIs, or the Horizon
        dashboard.</p>
    <ul>
      <li>An implementation of <xref href="https://wiki.openstack.org/wiki/Trove" format="html"
        scope="external">OpenStack Trove</xref>, the <xref href="devplatform.database-instance.dita#DatabaseService">Database
          Service</xref> provides scalable and reliable database provisioning functionality for both relational and non-relational databases.
        Supported datastores and their versions are: 
      
      <ul>
        <li>Percona MySql 5.5</li>
        <li>MongoDB 3.0</li>
        <li>Redis 3.0</li>
        <li>Vertica Preview (Vertica Community Edition 7.1.2)</li>
      </ul>
      </li>
      <li>The Database Service provides lifecycle management of database instances and clusters via a control plane, and automates common administration 
        tasks, including the following:
        <ul>
          <li>Replication</li>
          <li>Full and incremental backups</li>
          <li>Restore</li>
          <li>Database and user management</li>
          <li>Scaling</li></ul>
      </li>
      <li>Users can consume the service via the REST API, CLI, or HPE Helion OpenStack console.</li>
    </ul>
  </section>
  <section id="architecture_graphic">
    <title>Deployed View</title>
    <image placement="break" href="../../../media/dbaas_architecture.png" />
    <p>The Database Service is deployed as an In-Cloud service and is composed of the following components:</p>
    <ul>
      <li>A control plane, which is a set of services deployed on fifteen virtual machines (VMs) that manage and run the Database Service in a three availability zone (AZ) configuration. 
        These services are the API server, message bus (RabbitMQ), task manager, conductor, and Trove control plane database (Percona MySQL cluster).</li>
      <li>Customer Database Service instances and clusters which host the guest agent and datastore binary itself (for MySQL, MongoDB, Redis, and Vertica-Preview).  The figure above shows how 
        Database as a Service can manage multiple clusters belonging to multiple users.  Each database server consists of a VM and OpenStack Block Storage for the database files.  Users only 
        have access to the database via the datastore protocol. </li>
    </ul>
    <p>If HPE Helion OpenStack is configured to use multiple AZs, the Database Service will install across all zones using intelligent orchestration and data-level clustering. 
    </p>
  </section>
  <section id="components">
    <title>Components</title>    
    <p>A description of each component in the Database Service is provided below.</p>
    <table>
      <tgroup cols="2">
        <colspec colname="component" />
        <colspec colname="function" />
        <thead>
          <row>
            <entry colname="component">Component</entry>
            <entry colname="function">Function</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>API</entry>
            <entry>A REST API that provides access to common provisioning and administration tasks such as creating a database instance, resizing, adding users, managing backups, changing the instance configuration, and creating replicas.  
              The API communicates with the Task Manager and the Guest Agent. It accepts requests, converts them into messages, validates the request, and then forwards them to the Task Manager or Guest Agent. The API provides a single 
              way for users and developers to interact with individual database management systems in a consistent manner without having to be experts in a particular database technology.</entry>
          </row>
          <row>
            <entry>Message Bus</entry>
            <entry>Manages interaction between API endpoints, the Task Manager and the Guest Agent. The Message Bus is implemented using RabbitMQ version 3.4.1.</entry>
          </row>
          <row>
            <entry>Task Manager</entry>
            <entry>Provisions instances, manages the lifecycle, performance and operations of the database instance. The Task Manager receives messages from the API server, responds with consent and begins the task. It initiates complex 
              process flows within the system and manages them as they execute across multiple, distributed systems.</entry>
          </row>
          <row>
            <entry>Guest Agent</entry>
            <entry>Responsible for managing and performing operations on the database instance. It is a service that runs within the guest instance, or each clustered database node.  The Guest Agent brings the database online and also 
              sends heartbeat messages to the API via the Conductor. There is a Guest Agent for each datastore (database technology) implementation that is able to perform specific operations for that datastore.</entry>
          </row>
          <row>
            <entry>Conductor</entry>
            <entry>Responsible for receiving messages from guest instances to update information on the host.</entry>
          </row>
          <row>
            <entry>Database</entry>
            <entry>Provides persistent storage for maintaining the state of the service. It uses the Percona multi-master MySQL 5.5 distribution.</entry>
          </row>
        </tbody>
      </tgroup>
      
    </table>
  </section>
  <section id="Deployment">
    <title>Deployment</title>
    <p>The Database Service uses HPE Helion Orchestration (OpenStack Heat) to orchestrate its
        deployment. </p>
    <p>As a best practice, HP recommends creating three availability zones. The Helion OpenStack post install steps for setting up host aggregates to create AZs are documented</p>
    
    <p>
      
      The default configuration sets up the service in a high-availability (HA) model
        across three AZs. If only a single AZ exists the service control plane will not be deployed
        in a HA configuration. The HPE Helion OpenStack post install steps for setting up host
        aggregates to create AZs are documented and should be carried out before deploying the HPE
        Helion Platform services.</p>
    <p>By default, the control plane instances of the Database Service will use 15 medium flavor VMs for a 3 AZ deployment as illustrated in Figure 5. The size of the control plane and of the selected VM flavor are not configurable 
      in this release.</p>
    <p>Once the Database Service is running, the individual VMs in the control plane forward their
        logs to the Centralized Logging Service via the service network.</p>
    <p>When a user requests a database via the Database Service API, CLI, or horizon console, they provide the amount of OpenStack Block storage required for the database and VM instance flavor to be used.</p>
    <p>When using a MySQL database, users can easily create MySQL slave databases of an existing MySQL database by selecting the ‘Use replica’ option when creating a new database.  The Database Service will configure this new database 
      to start receiving replication data from the MySQL master specified.</p>
    <p>Once a new database becomes active users connect to it via the MySQL command line client, MySQL tools, or MySQL libraries used by applications.  Users can also assign a floating IP address to the database and update the security 
      group to allow for connection from outside the external-network.</p>
  </section>
  <section id="Data_Durability">
    <title>Data Durability</title>
    <p>The Database service ensures database content is protected through its integration with the HPE Helion OpenStack Block Storage. HPE Helion Openstack offers two cinder block storage plugins choices that provide Highly Available 
      RAID protected Storage volumes for use by the user databases</p>
    <ul>
      <li>HPE 3PAR storage arrays</li>
      <li>StoreVirtual VSA software running on ProLiant servers that creates a virtual array using the ProLiant server internal disks.</li>
    </ul>
    <p>For more information on HPE Helion OpenStack Cinder block storage and on capacity estimation
        guidelines, see <xref
          href="http://docs.hpcloud.com/#commercial/GA1/1.1commercial.-vsa-overview.html"
          format="html" scope="external">Cinder Block Storage Using HPE StoreVirtual VSA</xref>.</p>
  </section>
</body>
</topic>
