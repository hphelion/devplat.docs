<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="upservicesdevmysql">
    <title>HPE Helion Development Platform 2.0: MySQL Integration for Developers</title><abstract><shortdesc outputclass="hdphidden">Create a MySQL database service and bind it to an application.</shortdesc>These steps are intended for developers who intend to create a custom MySQL service and bind it
        to an application. The <xref href="up_services_admin_mysql.dita">administrator procedure</xref>
        must be completed prior to this point.</abstract>
    <body><section id="expandCollapse">
            <sectiondiv outputclass="expandall">Expand All Sections</sectiondiv>
            <sectiondiv outputclass="collapseall">Collapse All Sections</sectiondiv>
          </section>
        <section><title outputclass="headerH">Developer procedure to bind a MySQL service to an application.</title><sectiondiv outputclass="insideSection">
      <ol id="ol_zs1_ymf_55">
            <li>Log in to the ALS
                cluster<codeblock>helion target &lt;ALS cluster end point>
helion login</codeblock>
                Example:<codeblock>$ helion target api.15.124.133.173.xip.io
Successfully targeted to [https://api.15.124.133.173.xip.io]
Target:       https://api.15.124.133.173.xip.io
Organization: &lt;none&gt;
Space:        &lt;none&gt;       </codeblock><codeblock>$ helion login
Attempting login to [https://api.15.124.133.173.xip.io]
Username: myuser@mycompany.com
Password:Successfully logged into [https://api.15.124.133.173.xip.io]
demo@hpe.com Choosing the one available organization: "default"
Choosing the one available space: "default"
Target:      https://api.15.124.133.173.xip.io
Organization: default
Space:        default</codeblock></li>
            <li>Add the MySQL service to the <b>services</b> block of the application's manifest
                        file.<p>Sample manifest file including a reference to a MySQL service named
                            <codeph>my-mysql-db-service</codeph><codeblock> applications:
  .:
   name: my-app
   mem: 128M
   services:
     my-mysql-db-service: mysql
   helion:
    env:
      ENV_VAR: ${name}</codeblock></p><note>
                        When an application is deployed in the ALS cluster, the service connection
                        credentials are set as defined in the MySQL service gateway. The credentials
                        become available in the VCAP_SERVICES environment variables, which can be
                        consumed by your application. Best practice is to parse and use the
                        VCAP_SERVICES environment variables; do not hardcode connection credentials
                        in your application. More information on how to use VCAP_SERVICES can be
                        found <xref
                            href="../user/user/services/data-services.data#user_data_services/vcap-services"
                            >here</xref>.</note></li>
    <li>Deploy the application using the helion CLI. <codeblock>helion push -n</codeblock></li>
     </ol></sectiondiv></section>
        <section><title outputclass="headerH">Sample code Snippet (Python)</title><sectiondiv outputclass="insideSection">
    <codeblock>def testConnection(self,credentials):
       hostname = credentials['hostname']
       port = credentials['port']
       username = credentials['username']
       password = credentials['password']
       db = credentials['db'] 
       dbInstance = None
           
        try: 
# hostname contains the virtual IP of MySQL cluster        
            dbInstance = MySQLdb.connect(host=hostname,user=username,passwd=password,db=db,port=int(port)) 
        except MySQLdb.Error as e:
             return(e)
            
        try:
            testTableCreate = 'CREATE TABLE IF NOT EXISTS testtable( test_id int not null, test_value char(100),PRIMARY KEY(test_id));'
            cur = dbInstance.cursor()
            cur.execute(testTableCreate)
            dbInstance.commit()
        except MySQLdb.Error as e:
            return(e)
        
        try:
            testTableInsert = "INSERT INTO testtable(test_id, test_value) values(1,'foo')";
            cur = dbInstance.cursor()
            cur.execute(testTableInsert)
            dbInstance.commit() 
        except MySQLdb.Error as e:
            return(e)
        
        try:
            testTableInsert = "DROP TABLE testtable";
            cur = dbInstance.cursor()
            cur.execute(testTableInsert)
            dbInstance.commit()
        except MySQLdb.Error as e:
            return(e) </codeblock>
        </sectiondiv>
    </section>
    </body><related-links>  <linkpool conref="up_services_dev_message.dita#upservicesdevmessage/upservicesadmin"/></related-links>
</topic>
