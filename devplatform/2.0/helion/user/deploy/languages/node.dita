<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" ><topic xml:lang="en-us" id="topic3629">
<title>HPE Helion Development Platform 2.0: Developing in Node</title>
<prolog>
<metadata>
<othermeta name="layout" content="default"/>
<othermeta name="product-version" content="HPE Helion Development Platform"/>
  <othermeta name="product-version" content="HPE Helion Development Platform 2.0"/>
<othermeta name="role" content="Application Developer"/>
<othermeta name="role" content="ISV Developer"/>
<othermeta name="role" content="Service Developer"/>
<othermeta name="role" content="Jayme P"/>
</metadata>
</prolog>
<body>
<p>Application Lifecycle Service has a built in Node framework with multiple versions of the
  <xref href="http://nodejs.org/" scope="external" format="html" >Node.js</xref> runtime. <xref href="https://npmjs.org/" scope="external" format="html" >NPM</xref> is used
to install Node packages automatically.</p>
  <p>Deployable <xref href="../../../../devplatform.appdev.dita#topic2457/node" type="section"   >sample applications</xref> are available in this language.</p>
<section id="node-npm"> <title>NPM</title>
<p>Your application should list dependencies in a standard, top-level
<xref href="https://docs.npmjs.com/getting-started/creating-node-modules" scope="external" format="html" >
<i>package.json</i> file</xref>. Application Lifecycle Service
automatically installs packages listed in the "dependencies" section
before starting the server.</p>
<p>Alternatively, you can call NPM directly using <xref
          href="../manifestyml.dita#topic20922/hooks"><i>hooks</i></xref> in the
          <i>manifest.yml</i> file.</p>
<p>For NPM packages which include callable scripts or binaries, executable components are automatically added to the container's \$PATH, so a "global install" (<codeph>npm install -g</codeph>) is not required.</p>
</section>
<section id="host-and-port-environment-variables"> <title>Host and Port Environment Variables</title>
<p>Deploying Node applications to Application Lifecycle Service requires changing some
application settings to use instance-specific values. These values are
provided to Application Lifecycle Service using environment variables. For example, the
application is not allowed to arbitrarily choose which port it runs on.
It must use the port assigned by Application Lifecycle Service with the <codeph>PORT</codeph> variable. To access this in a node application:</p>
<codeblock>process.env.PORT</codeblock>
<p>Likewise, the host IP address is exposed by <codeph>VCAP_APP_HOST</codeph>:</p>
<codeblock>process.env.VCAP_APP_HOST</codeblock>
<p>To make the application usable in both local and Application Lifecycle Service deployments,
use structures such as:</p>
<codeblock>var port = process.env.PORT || 1337;
var host = process.env.VCAP_APP_HOST || "127.0.0.1";</codeblock>
</section>
<section id="using-data-services"> <title>Using Data Services</title>
<p>Data services need to be configured with values from VCAP_SERVICES, DATABASE_URL, or a
        database-specific environment variable (see also <xref
          href="../../services/data-services.dita#user_data_services/using-database-services">Using
          Database Services</xref>).</p>
<p>If the database module you use supports URL-formatted connection strings, using the <xref href="../../services/data-services.dita#user_data_services/database-specific-urls">database-specific</xref> URL variable (REDIS_URL, MONGODB_URL, etc.) is often
        the simplest option.</p>
<p>Use the variable in your code to connect your application to the
database. For example:</p>
<codeblock>console.log("attempting to connect to mongodb");
if(process.env.MONGODB_URL){
  mongoose.connect(process.env.MONGODB_URL);
} else {
  mongoose.connect("127.0.0.1", "myappdb", 27017);
}</codeblock>
<p>
<codeph>VCAP_SERVICES</codeph> is a JSON object
containing information about all the data service bound to the
application. A typical <codeph>VCAP_SERVICES</codeph> variable
containing a single MongoDB service might look like this:</p>
<codeblock>  {
  "mongodb": [
    {
      "name": "todos",
      "label": "mongodb-2.4",
      "plan": "free",
      "tags": [
        "mongodb",
        "mongodb-2.4",
        "nosql"
      ],
      "credentials": {
        "hostname": "192.168.66.117",
        "host": "192.168.66.117",
        "port": 25001,
        "username": "4ce459bf-7a15-4c40-ac28-81adbdeba902",
        "password": "00a42612-9751-4d63-a758-186429d4903f",
        "name": "b89e2bc0-cae7-482c-8a47-8c816c67c62e",
        "db": "db"
      }
    }
  ]
}</codeblock>
<p>To use this information in your application code, use something similar
to this block:</p>
<codeblock>  if(process.env.VCAP_SERVICES){
  var services = JSON.parse(process.env.VCAP_SERVICES);
  var dbcreds = services['mongodb'][0].credentials;
}

if(dbcreds){
  console.log(dbcreds);
  mongoose.connect(dbcreds.host, dbcreds.db, dbcreds.port, {user: dbcreds.username, pass: dbcreds.password});
} else {
  mongoose.connect("127.0.0.1", "myappdb", 27017);
}</codeblock>
<p>This is the typical pattern used for all databases exposed by
VCAP_SERVICES.</p>
</section>
</body>
</topic>
