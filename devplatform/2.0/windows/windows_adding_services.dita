<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" ><topic xml:lang="en-us" id="topic3869">
<title>HPE Helion Development Platform 2.0: Adding Services to Windows Applications</title>
<prolog>
<metadata>
<othermeta name="layout" content="default"/>
<othermeta name="product-version" content="HPE Helion Development Platform"/>
<othermeta name="product-version" content="HPE Helion Development Platform 2.0"/>
<othermeta name="role" content="Systems Administrator"/>
<othermeta name="role" content="System Engineer"/>
<othermeta name="role" content="Cloud Administrator"/>
<othermeta name="role" content="Network Administrator"/>
<othermeta name="role" content="Application Developer"/>
<othermeta name="role" content="Application Developer"/>
<othermeta name="role" content="ISV Developer"/>
<othermeta name="role" content="Service Developer"/>
<othermeta name="role" content="Patrick F"/>
</metadata>
</prolog>
<body>
<p>
<!--PUBLISHED-->
 <!--./devplatform/windows/windows_adding_services.md-->
 <!--permalink: /helion/devplatform/windows/adding_services/--></p>
<p>
  <!--Original: <span @class=>--><ph>
    <i>Windows, .NET, SQL Server, and IIS are either registered trademarks or trademarks of Microsoft Corporation in the United States and/or other countries.</i>
  </ph>
</p>
<p>Windows applications can be bound to services running in your deployment environment, such as Redis or MySQL. To do so, you need to have a NuGet package that can communicate with those services.</p>
<p>The following tutorial demonstrates how to add a Redis service to your .NET application.</p>
<p>
<b>Note:</b> The NuGet packages used in this tutorial are for sample purposes only. Verify that packages are working for your application before deploying them to a production environment.</p>
<section id="adding-a-service-to-a-net-application"> <title>Adding a service to a .NET application</title>
<ol>
<li>When deploying your application using <xref
            href="windows_tools_guide.dita#windows_tools/cloudfoundryextensions">Cloud Foundry
            Explorer</xref>, in the deployment information window, enter the service information in
          the <b>Service</b> field in the format <codeph>Service Name, Service Type, Service
            Plan</codeph>:<p>
            <image href="../../../media/windows_services.png"/>
          </p></li>
<li>Deploy your application.</li>
<li>Once the application gets successfully created, your VCAP_SERVICES file will have a node such as
          the
          following:<codeblock>"redis-2.8": [
{
  "name": "redistest",
  "label": "redis-2.8",
  "plan": "free",
  "tags": [

  ],
  "options": {

  },
  "credentials": {
    "hostname": "0.0.0.0",
    "host": ".0.0.0",
    "port": 5001,
    "password": "f4774d0b-2f8d-45da-ba3e-545f0cb9b35a",
    "name": "01b32e35-248a-43d7-b90d-ab3f2611e644",
    "uri": "redis:\/\/01b32e35-248a-43d7-b90d-ab3f2611e644:f4774d0b-2f8d-45da-ba3e-545f0cb9b35a@192.168.1.50:5001\/"
  }
}</codeblock></li>
<li> Add dependencies.<ol>
            <li> Add a JSON package. In this case, you'll install <b>JSON.NET</b>. Open the
                <b>Manage NuGet Packages</b> dialog (under <b>Tools-&gt;NuGet Package
                Manager-&gt;Manage NuGet Packages for Solution...</b>), select the <b>Online</b>
              node, and search for <b>JSON.NET</b>. Click <b>Install</b>.<p>
                <image href="../../../media/windows_nuget_json.png"/>
              </p></li>
            <li> Add a Redis client. In this case, you'll install <b>StackExchange.Redis</b>. Open
              the <b>Manage NuGet Packages</b> dialog, select the <b>Online</b> node, and search for
                <b>StackExchange.Redis</b>. Click <b>Install</b>.<p>
                <image href="../../../media/windows_nuget_redis.png"/>
              </p></li>
          </ol></li>
<li> To verify that the services are working, create a new MVC5 View (CSHTML) page with the
          following
            contents:<codeblock>Text from Redis:
@{
   try
    {                    
        string vcap = Environment.GetEnvironmentVariable("VCAP_SERVICES");

        JObject services = Newtonsoft.Json.Linq.JObject.Parse(vcap);
        string host = services["redis-2.8"].First["credentials"]["host"].ToString();
        string port = services["redis-2.8"].First["credentials"]["port"].ToString();
        string password = services["redis-2.8"].First["credentials"]["password"].ToString();
        string conn = String.Format("{0}:{1},password={2}", host, port, password);

        ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(conn);
        IDatabase db = redis.GetDatabase();                
        string input = "This is an example on how to use redis in .NET";
        db.StringSet("mykey", input);

        string output = db.StringGet("mykey");
        @output;

    }
    catch (Exception e)
    {
        @e.ToString();
    }

}</codeblock><p>In
            the above code sample, the application does the following:</p><ol>
            <li>Reads the Redis connection information from the VCAP_SERVICES environment
              variable</li>
            <li>Creates a connection to the Redis service</li>
            <li>Sends a string to the Redis service</li>
            <li>Reads a string back from the Redis service</li>
            <li>Displays the returned string</li>
          </ol></li>
<li>Deploy and open the application. You will see the following result:<p>
            <image href="../../../media/windows_redis_result.png"/>
          </p></li>
</ol>
</section>
</body>
</topic>
