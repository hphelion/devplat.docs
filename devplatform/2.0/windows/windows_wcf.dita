<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_u2d_gxj_bt">
  <title>Deploying a WCF Service</title>
  <body>
    <section><ph><i>Windows, .NET, SQL Server, and IIS are either registered trademarks or
          trademarks of Microsoft Corporation in the United States and/or other countries.</i></ph>
      <p>This topic describes how to deploy a basic Windows Communication Foundation (WCF) service.
        For the purposes of this tutorial, you will create and deploy a WCF web service with one
        method, and create a basic client application to test the service.</p><p>This topic contains
        the following sections:</p><ul>
        <li><xref type="section" href="#topic_u2d_gxj_bt/prerequisites">Prerequisites</xref></li>
        <li><xref type="section" href="#topic_u2d_gxj_bt/service">Creating the web service
            application</xref></li>
        <li><xref type="section" href="#topic_u2d_gxj_bt/deploy">Deploying the service
            application</xref></li>
        <li><xref type="section" href="#topic_u2d_gxj_bt/client">Creating and running the test
            client</xref></li>
      </ul></section>
    <section id="prerequisites"><title>Prerequisites</title>
    <p>This tutorial requires the following:</p>
      <ul>
        <li>Visual Studio 2013. Any edition is supported, including the Community (Free) edition.</li>
        <li>Cloud Foundry Extensions and Cloud Foundry MSBuild tasks. See 
          <xref href="windows_tools_guide.dita#windows_tools/cloudfoundryextensions" type="section"> Windows and .NET Tools Guide: Cloud Foundry Explorer</xref> and 
          <xref href="windows_tools_guide.dita#windows_tools/msbuild" type="section">Windows and .NET Tools Guide: MSBuild Tasks</xref> for more details. </li>
      </ul>
    </section>
    <section id="service"><title>Creating the web service application</title>
    <p>In this section, you'll create a Web application and add a WCF service.
      <note>The Cloud Foundry MSBuild tasks only support deploying a Web Application or a Web Site; other application types, such as WCF, are not supported.</note></p>
      <ol>
        <li>Open Visual Studio 2013. Select <b>File</b>, <b>New...</b></li>
        <li>In the <b>Templates</b> pane, select the <b>Visual C#</b> node, and select <b>Web</b>. Select <b>ASP.NET Web Application</b>, name the project <b>HelionWCF</b>, and click <b>OK</b>.
        <image placement="break" href="../../../media/windows_wcf_create_1.png"></image></li>
        <li>In the <b>New ASP.NET Project</b> window, select the <b>Empty</b> template and click <b>OK</b>.
          <image placement="break" href="../../../media/windows_wcf_create_2.png"></image></li>
        <li>Right-click the solution and select <b>Manage NuGet Packages for Solution...</b>. Search online for <b>CloudFoundry MSBuild Tasks</b>, and click <b>Install</b> in the 
        <b>Cloud Foundry Build Tasks</b> item. Click <b>Close</b>.
        <image placement="break" href="../../../media/windows_wcf_create_4.png"></image></li>
        <li>In <b>Solution Explorer</b>, right-click the <b>HelionWCF</b> project and select <b>Add...</b>, <b>New Item</b>.</li>
        <li>Select <b>Web</b> in the left pane if it isn't selected already. Scroll down the middle pane and select <b>WCF Service</b>. Click <b>OK</b>.
          <image placement="break" href="../../../media/windows_wcf_create_3.png"></image></li>
        <li>Change the contents of <b>IService1.cs</b> (the service interface definition) to the following:
        <codeblock>using System.ServiceModel;

namespace HelionWCF
{
    [ServiceContract]
    public interface IService1
    {
        [OperationContract]
        double DoubleIt(double numToDouble);
    }
}</codeblock></li>
        <li>Change the contents of <b>Service1.svc.cs</b> to the following:
        <codeblock>namespace HelionWCF
{
    public class Service1 : IService1
    {
        public double DoubleIt(double numToDouble)
        {
            return numToDouble * 2;
        }
    }
}
</codeblock></li>
      </ol>
    </section>
    <section id="deploy"><title>Deploying the web service application</title>
      <p>Now that you've created a WCF service hosted in a Web application, you'll deploy the application.</p>
      <p>For this section of the tutorial, you'll need the connection information for a Windows DEA
        cluster running on a Public Cloud account. For information on creating a Windows DEA node on
        Public Cloud, see <xref href="windows_firstapp.dita">Building and deploying your first
          Windows application</xref>.</p>
      <ol>
        <li>Right-click on the project in <b>Solution Explorer</b> and select <b>Publish to Cloud Foundry</b>.</li>
        <li>In the <b>Publish to Cloud Foundry</b> dialog, click the <b>...</b> button in the <b>Target URL</b> line.</li>
        <li>Provide your access credentials for your Windows DEA node. Select <b>Skip SSL validation</b> (required for Helion Public Cloud). Click <b>OK</b>.
        <image placement="break" href="../../../media/windows_wcf_deploy_2.png"></image></li>
        <li>In the <b>Publish to Cloud Foundry</b> dialog, enter <b>HelionWCF</b> for the <b>Route</b>. This value, along with the URL of the cluster, will determine the URL of the application. Select <b>Publish</b>.</li>
        <li>To monitor the publish progress, select <b>View</b>, <b>Output</b>.</li>
      </ol>
    </section>
    <section id="client"><title>Creating and running the test client</title>
      <p>Now that you've developed a WCF service and deployed it to a Helion installation, you'll create a basic console application to test it. You'll use 
        <b>svcutil.exe</b> to create a proxy, then use the proxy to call the web service from the client application.</p>
      <ol>
        <li>Right-click the solution in <b>Solution Explorer</b>. Select <b>Add</b>, <b>New Project</b>. In the Templates pane, select the <b>Visual C#</b> node, select <b>Console Application</b>, name the project <b>HelionWCFClient</b>, and click <b>OK</b>.
        <image placement="break" href="../../../media/windows_wcf_client_1.png"></image></li>
        <li>In <b>Solution Explorer</b>, right-click the <b>HelionWCFClient</b> project, and select <b>Add</b>, <b>Reference</b>. In the <b>Add Reference</b> dialog, search for <b>System.ServiceModel</b>,
          and select the checkbox next to <b>System.ServiceModel</b> in the results to add it to the project. Click <b>OK</b>.
          <image placement="break" href="../../../media/windows_wcf_client_2.png"></image>
       </li>
        <li>Next, you'll use <b>Svcutil.exe</b> to generate a proxy. Open a <b>Visual Studio 2013 Developer Command Prompt</b>. This is usually found in the Start menu under <b>Visual Studio 2013</b>, <b>Visual Studio Tools</b>.</li>
        <li>In the command prompt, navigate to the home directory for the client project you just created. By default, this is <b>C:\Users\&lt;username&gt;\Documents\Visual Studio 2013\Projects\HelionWCF\HelionWCFClient</b>.</li>
        <li>Enter the following command, substituting the address of your Windows DEA cluster:
        <codeblock>svcutil http://helionwcf.15.126.140.115.xip.io/service1.svc</codeblock>
        The <b>svcutil.exe</b> tool will access your running web service and generate a file called <b>Service1.cs</b>.</li>
        <li>In Visual Studio, in <b>Solution Explorer</b>, right-click the <b>HelionWCFClient</b> project, and select <b>Add</b>, <b>Existing Item</b>. Select <b>Service1.cs</b> and click <b>Add</b>.</li>
        <li>In <b>Solution Explorer</b>, under the <b>HelionWCFClient</b> project, open <b>App.config</b>. Replace the contents of the file with the following, replacing the endpoint address
          with that of your Windows DEA node:
        <codeblock>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;configuration&gt;
    &lt;startup&gt; 
        &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" /&gt;
    &lt;/startup&gt;
  &lt;system.serviceModel&gt;
    &lt;client&gt;
      &lt;endpoint address="http://helionwcf.15.126.140.115.xip.io/service1.svc" binding="basicHttpBinding" contract="IService1"/&gt;
    &lt;/client&gt;
  &lt;/system.serviceModel&gt;
&lt;/configuration&gt;</codeblock></li>
        <li>In <b>Solution Explorer</b>, under the <b>HelionWCFClient</b> project, open <b>Program.cs</b>. Replace the contents of the file with the following:
        <codeblock>using System;

namespace HelionWCFClient
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Creating proxy");
            var client = new Service1Client();
            var input = 100D;
            Console.WriteLine("Calling method on proxy");
            var output = client.DoubleIt(input);
            Console.WriteLine("Response from server: {0}", output);
            Console.WriteLine("Press any key to exit");
            Console.ReadKey();
        }
    }
}</codeblock></li>
        <li>In <b>Solution Explorer</b>, right-click the <b>HelionWCFClient</b> project and select <b>Set as StartUp Project</b>. </li>
        <li>Run the application (<b>F5</b>). The output will look like the following:
        <image placement="break" href="../../../media/windows_wcf_client_3.png"></image></li>
      </ol>
    </section>
  </body>
</topic>

