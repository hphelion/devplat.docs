<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" ><topic xml:lang="en-us" id="topic5076">
<title>HPE Helion 1.2 Development Platform: Java Hello World Sample</title>
<prolog>
<metadata>
<othermeta name="layout" content="default"/>
<othermeta name="product-version" content="HPE Helion Development Platform"/>
<othermeta name="product-version" content="HPE Helion Development Platform 1.2"/>
<othermeta name="role" content="Application Developer"/>
<othermeta name="role" content="Security Engineer"/>
<othermeta name="role" content="ISV Developer"/>
<othermeta name="role" content="Service Developer"/>
<othermeta name="role" content="Jayme P"/>
<othermeta name="product-version1" content="HPE Helion Development Platform"/>
<othermeta name="product-version2" content="HPE Helion Development Platform 1.2"/>
</metadata>
</prolog>
<body>
<p>
<!--PUBLISHED-->
 <!--./devplatform/1.2/workbook/helloworld/1.2helloworld.java.md-->
 <!--permalink: /helion/devplatform/1.2/workbook/helloworld/java/--></p>
<p>This Servlet-based Java web app displays the text "Hello World!". This is a demonstration of the minimum requirements to build a functional application. Use this sample to ensure that you have set up your environment for deployment to Helion Development Platform.</p>
<section id="prerequisites"> <title>Prerequisites</title>
<p>If you are missing any of these items, you must <xref href="../../../../devplatform/1.2/1.2devplatform.appdev.dita" >install them</xref>.</p>
<ul>
<li>Access to an Application Lifecycle Service (ALS) <xref href="../../../../devplatform/1.2/helion/admin/cluster/1.2index.dita" >Cluster</xref>
</li>
<li>The  <xref href="../../../../devplatform/1.2/helion/user/client/1.2index.dita" >Helion command-line interface (CLI)</xref> must be installed.</li>
<li>Access to the web-based <xref href="../../../../devplatform/1.2/helion/user/console/1.2index.dita" >Helion Management Console</xref>.</li>
</ul>
</section>
<section id="jdk"> <title>JDK</title>
<p>Install the Java Development Kit (JDK) before installing other prerequisites.</p>
<ul>
<li>
<p>Mac/UNIX: the JDK can be installed with the following command.</p>
<codeblock>
sudo apt-get install default-jdk
</codeblock>
</li>
<li>
<p>PC: Navigate to the <xref href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" scope="external" format="html" >JDK installation page</xref> and run the appropriate JDK installer for your chosen platform.</p>
</li>
</ul>
</section>
<section id="maven"> <title>Maven</title>
<p>
<xref href="http://maven.apache.org/" scope="external" format="html" >Maven</xref> must be installed.</p>
<ul>
<li>
<p>Mac/UNIX: Maven can be installed with the following command:</p>
<codeblock>
sudo apt-get install maven
</codeblock>
</li>
<li>
<p>PC: Navigate to the <xref href="http://maven.apache.org/download.cgi" scope="external" format="html" >Maven installation page</xref> and follow the <xref href="http://maven.apache.org/guides/getting-started/windows-prerequisites.html" scope="external" format="html" >installation directions</xref>.</p>
</li>
</ul>
</section>
<section id="download-the-application-files"> <title>Download the Application Files</title>
<p>
<xref href="https://github.com/HelionDevPlatform/helion-hello-world-java" scope="external" format="html" >Click here to access the code repository.</xref>
</p>
</section>
<section id="build-the-application"> <title>Build the Application</title>
<p>In the root directory of the sample package, execute the following command:</p>
<codeblock>
mvn clean package
</codeblock>
<p>This builds the application with Maven. It will create the <i>hello-world-java-1.0.war</i> file within the target directory.</p>
</section>
<section id="deploy-the-application"> <title>Deploy the Application</title>
<p>
                <b>Note</b>: Application Lifecycle Service clusters that require an upstream HTTP
                proxy to access the internet will need to be <xref
                    href="../../helion/admin/server/1.2configuration.dita#topic31232/staging-cache-app-http-proxy"
                    >made aware of the proxy</xref>. The sample applications require access to the
                Internet in order to download dependent packages.</p>
<p>Use the Helion client to deploy your app to Helion Development Platform.</p>
<ol>
<li>Open the <xref href="../../../../devplatform/1.2/helion/user/reference/1.2client-ref.dita" >Helion command-line interface (CLI)</xref>
</li>
<li>
<p>Ensure that you are targeting your desired environment. If you are not, execute</p>
<codeblock>helion target https://api.xx.xx.xx.xx.xip.io</codeblock>
</li>
<li>
<p>Ensure that you are logged in to your desired environment.  <!--A BR tag was used here in the original source.-->If you are not, execute</p>
<codeblock>helion login</codeblock>
</li>
<li>
<p>If you are not already there, <codeblock>cd</codeblock> to the root directory of the sample.</p>
</li>
<li>
<p>Deploy the application by using the command:</p>
<codeblock>helion push</codeblock>
</li>
<li>
<p>Accept any default values that you may be prompted for. <!--A BR tag was used here in the original source.--><b>Note</b>: By default ALS clusters are configured with two domains (private and public). In some situations the Helion CLI may prompt you to select a target domain. If prompted, select the public domain from the given list (i.e. <i>&lt;app-name&gt;.xxx.xxx.xxx.xxx.xip.io</i>)</p>
</li>
</ol>
</section>
<section id="key-code-snippets"> <title>Key Code Snippets</title>
<p>This simple Servlet prints "Hello World".</p>
<codeblock>
package org.hp.samples;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/plain");
        response.setStatus(200);
        PrintWriter writer = response.getWriter();
        writer.println("Hello World");
        writer.close();
    }
}
</codeblock>
<p>The <i>POM.xml</i> file contains the configuration information generated by Maven and used by ALS to set up the environment.</p>
<codeblock>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;org.hp.samples&lt;/groupId&gt;
    &lt;artifactId&gt;hello-world-java&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
    &lt;packaging&gt;war&lt;/packaging&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
            &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
            &lt;version&gt;2.5&lt;/version&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/project&gt;
</codeblock>
</section>
<section id="run-the-application"> <title>Run the Application</title>
<ol>
<li>Open the Helion Management Console. This is the web-based administrative interface that can be reached by typing the ALS endpoint URL into a browser window.</li>
<li>Click <b>Applications</b>.</li>
<li>If the file push was successful, you should see <b>hello-world-java</b> in the list of available applications.</li>
<li>The status of the application should be <b>Started</b>. Click the name of the application to launch it.</li>
<li>In the upper right-hand corner, click <b>View App</b>.</li>
<li>You should see a simple text message: <b>Hello World!</b> </li>
</ol>
</section>
<section id="key-learnings"> <title>Key Learnings</title>
<ol>
<li>ALS requires configuration information to create an environment for your app. Configuration information is contained in the <i>pom.xml</i> file. Tools like Maven can generate this configuration file for you.</li>
<li>You can deploy your app using either the Helion CLI.</li>
</ol>
<p>
<xref href="../../1.2devplatform.appdev.dita">Exit Samples</xref>/ | <xref href="../../../../devplatform/1.2/workbook/messaging/1.2messaging.java.dita">Previous Sample</xref> | <xref href="../database/1.2database.java.dita#topic6838" type="section">Next Sample</xref>
</p>
</section>
</body>
</topic>
