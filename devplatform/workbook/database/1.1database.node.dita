<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" ><topic xml:lang="en-us" id="topic5997">
<title>HPE Helion 1.1 Development Platform: Node MySQL Database Sample</title>
<prolog>
<metadata>
<othermeta name="layout" content="default"/>
<othermeta name="product-version" content="HPE Helion Development Platform"/>
<othermeta name="product-version" content="HPE Helion Development Platform 1.1"/>
<othermeta name="role" content="Application Developer"/>
<othermeta name="role" content="Security Engineer"/>
<othermeta name="role" content="ISV Developer"/>
<othermeta name="role" content="Service Developer"/>
<othermeta name="role" content="Jayme P"/>
<othermeta name="product-version1" content="HPE Helion Development Platform"/>
<othermeta name="product-version2" content="HPE Helion Development Platform 1.1"/>
</metadata>
</prolog>
<body>
<p>
<!--PUBLISHED-->
 <!--./devplatform/workbook/database/1.1database.node.md-->
 <!--permalink: /helion/devplatform/1.1/workbook/database/node/--></p>
<p>

</p>
<p>This very simple Node.js app displays the text "Executed query "SELECT "Hello World!"".", and then the result of that query: "Hello World". This is a demonstration of the minimum requirements to build an application that can connect to a MySQL database provided by ALS and run queries against it. Use this sample to ensure that you have set up your environment for connecting to and working with MySQL on the Helion Development Platform.</p>
<section id="prerequisites"> <title>Prerequisites</title>
<p>If you are missing any of these items, you will need to <xref href="../../../devplatform/1.1devplatform.appdev.dita" >install them</xref>.</p>
<ul>
<li>Access to an Application Lifecycle Service (ALS) <xref href="../../../devplatform/helion/admin/cluster/1.1index.dita" >Cluster</xref>
</li>
<li>The  <xref href="../../../devplatform/helion/user/client/1.1index.dita" >Helion command-line interface (CLI)</xref> must be installed.</li>
<li>Access to the web-based <xref href="../../../devplatform/helion/user/console/1.1index.dita" >Helion Management Console</xref>.</li>
</ul>
</section>
<section id="mysql"> <title>MySQL</title>
<p>If the MySQL service is not enabled on your cluster, or if you are not sure, follow these steps:</p>
<ol>
<li>Go to the Administrative console for your ALS cluster. <!--A BR tag was used here in the original source.-->For example: <i>https://api.xx.xx.xx.xx.xip.io</i>, substitute your own cluster's link.</li>
<li>On the <b>Admin</b> tab, click <b>Cluster</b>.</li>
<li>Click <b>Cluster Nodes</b> on the left side of the page.</li>
<li>Click the <b>Settings</b> icon (a gear icon in the upper right corner)</li>
<li>The <b>MySQL</b> check box should be checked. If it is not, check it.</li>
<li>Click <b>Save</b>.</li>
</ol>
<p>
<b>Note</b>: If a more durable or scalable MySQL database service is needed, configure your ALS cluster to use a database instance or master/slave pair provided by the Database Service. For more information, refer to <xref href="../../../devplatform/1.1devplatform.database-instance.dita" >Using the Database Service</xref> and <xref href="../../../devplatform/1.1devplatform.database-ALS.dita" >Connecting the Database Service with ALS</xref>.</p>
</section>
<section id="download-the-application-files"> <title>Download the Application Files</title>
<p>
<xref href="https://github.com/HelionDevPlatform/helion-mysql-node/" scope="external" format="html" >Click here to access the code repository</xref>.</p>
</section>
<section id="deploy-the-application"> <title>Deploy the Application</title>
<p>
<b>Note</b>: Application Lifecycle Service clusters that require an upstream HTTP proxy to access the internet will need to be <xref href="../../../devplatform/helion/admin/server/1.1configuration.dita#staging-cache-app-http-proxy" type="section"  >made aware of the proxy</xref>. The sample applications require access to the Internet in order to download dependent packages.</p>
<p>Use the Helion client to deploy your app to Helion Development Platform.</p>
<ol>
<li>Open the <xref href="../../../devplatform/helion/user/reference/1.1client-ref.dita" >Helion command-line interface (CLI)</xref>
</li>
<li>
<p>Ensure that you are targeting your desired environment.  <!--A BR tag was used here in the original source.--> If you are not, execute</p>

<codeblock>
<codeph>helion target https://api.xx.xx.xx.xx.xip.io    
</codeph>
</codeblock>
</li>
<li>
<p>Ensure that you are logged in to your desired environment.  <!--A BR tag was used here in the original source.-->If you are not, execute</p>

<codeblock>
<codeph>helion login
</codeph>
</codeblock>
</li>
<li>
<p>If you are not already there, <codeph>cd</codeph> to the root directory of the sample.</p>
</li>
<li>
<p>Deploy the application by using the command:</p>

<codeblock>
<codeph>helion push
</codeph>
</codeblock>
</li>
<li>
<p>Accept any default values that you may be prompted for.
<!--A BR tag was used here in the original source.--><b>Note</b>: By default ALS clusters are configured with two domains (private and public). In some situations the Helion CLI may prompt you to select a target domain. If prompted, select the public domain from the given list (i.e. <i>&lt;app-name&gt;.xxx.xxx.xxx.xxx.xip.io</i>)</p>
</li>
</ol>
</section>
<section id="key-code-snippets"> <title>Key Code Snippets</title>
<p>The first line in this section of the Server.js file shows how to retrieve the connection information for the MySQL instance from the application's environment variables. The connection information is represented using JSON. The rest of the code shown here parses the JSON string that was retrieved, connects to the database, execute a query, and prints the response.</p>
<codeblock>
  <codeph>var services = process.env.VCAP_SERVICES;

// Parse the JSON so that we can extract the individual components needed for
 // using MySQL
  services = JSON.parse(services);

  // Since there's only one service, we grab the only node which is for MySQL.
  var credentials = services.mysql[0].credentials;

  // The credentials node has a lot of fields, but we are only concerned with
  // the ones below for this MySQL sample.
  var dbname = credentials.name;
  var hostname = credentials.hostname;
  var user = credentials.user;
  var password = credentials.password;
  var port = credentials.port;

  response.write("\n Connecting to MySQL...");

  // Create a connection to MySQL
  var connection = mysql.createConnection({
    database : dbname,
    host : hostname,
    port : port,
    user : user,
    password : password
  });

  connection.connect();

  response.write("\n Connected to MySQL!");

  // Create a query to be executed against a MySQL database.
  var queryResult = '';
  connection.query('SELECT \"Hello World\" AS result', function(err, rows, fields) {
    if (err) {
      throw err;
    }

    queryResult = rows[0].result;

    response.write("\n Executed \'SELECT \"Hello World\" AS result\' ");
    response.write("\n Result =  " + queryResult);

    // Close the connection
    connection.end(function(err){
      console.log("\n Closing the MySQL connection");
   });
      }
</codeph>
</codeblock>
<p>The <i>manifest.yml</i> file is the configuration information used by ALS to set up the environment. The <b>services</b> element instructs ALS how to bind to the MySQL service provided by the ALS cluster to the application.</p>
<codeblock>
  <codeph>---
applications:
- name: mysql-node
  mem: 128M
  services:
    ${name}-db:
      type: mysql
</codeph>
</codeblock>
</section>
<section id="run-the-application"> <title>Run the Application</title>
<ol>
<li>Open the Helion Management Console. <!--A BR tag was used here in the original source.--> The Management Console is the web-based administrative interface that can be reached by typing the ALS endpoint URL into a browser window.</li>
<li>Click <b>Applications</b>.</li>
<li>If the file push was successful, you should see <b>mysql-node</b> in the list of available applications.</li>
<li>The status of the application should be <b>Started</b>. Click the name of the application to launch it. </li>
<li>In the upper right-hand corner, click <b>View App</b>.</li>
</ol>
</section>
<section id="key-learnings"> <title>Key Learnings</title>
<ul>
<li>You need to provide configuration information so that ALS can bind to a MySQL service. Configuration information is contained in the <i>manifest.yml</i> file.</li>
<li>You need to retrieve connection information for MySQL from the application's environment variables, and parse the information into a JDBC compliant connection string.</li>
<li>You interact with and deploy your app using the <xref href="../../../devplatform/helion/user/reference/1.1client-ref.dita" >ALS command line client</xref> or the web-based <xref href="../../../devplatform/helion/user/console/1.1index.dita" >ALS Management Console</xref>.</li>
</ul>
<p>
<xref href="../../../devplatform/1.1devplatform.appdev.dita" >Exit Samples</xref> | <xref href="../../../devplatform/workbook/helloworld/1.1helloworld.node.dita" >Previous Sample</xref> | <xref href="../../../devplatform/workbook/messaging/1.1messaging.node.dita" >Next Sample</xref>
</p>
</section>
</body>
</topic>
