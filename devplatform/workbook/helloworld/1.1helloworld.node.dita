<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" ><topic xml:lang="en-us" id="topic4452">
<title>HPE Helion 1.1 Development Platform: Node Hello World Sample</title>
<prolog>
<metadata>
<othermeta name="layout" content="default"/>
<othermeta name="product-version" content="HPE Helion Development Platform"/>
<othermeta name="product-version" content="HPE Helion Development Platform 1.1"/>
<othermeta name="role" content="Application Developer"/>
<othermeta name="role" content="Security Engineer"/>
<othermeta name="role" content="ISV Developer"/>
<othermeta name="role" content="Service Developer"/>
<othermeta name="role" content="Jayme P"/>
<othermeta name="product-version1" content="HPE Helion Development Platform"/>
<othermeta name="product-version2" content="HPE Helion Development Platform 1.1"/>
</metadata>
</prolog>
<body>
<p>
<!--PUBLISHED-->
 <!--./devplatform/workbook/helloworld/1.1helloworld.node.md-->
 <!--permalink: /helion/devplatform/1.1/workbook/helloworld/node/--></p>
<p>

</p>
<p>This very simple Node.js web app displays the text "Hello World!". This sample is a demonstration of the minimum requirements to build a functional application. Use this sample to ensure that you have set up your environment for deployment to Helion Development Platform.</p>
<section id="prerequisites"> <title>Prerequisites</title>
<p>If you are missing any of these items, you must <xref href="../../../devplatform/1.1devplatform.appdev.dita" >install them</xref>.</p>
<ul>
<li>Access to an Application Lifecycle Service (ALS) <xref href="../../../devplatform/helion/admin/cluster/1.1index.dita" >Cluster</xref>
</li>
<li>The  <xref href="../../../devplatform/helion/user/client/1.1index.dita" >Helion command-line interface (CLI)</xref> must be installed.</li>
<li>Access to the web-based <xref href="../../../devplatform/helion/user/console/1.1index.dita" >Helion Management Console</xref>.</li>
</ul>
</section>
<section id="download-the-application-files"> <title>Download the Application Files</title>
<p>
  <xref href="https://github.com/HelionDevPlatform/helion-hello-world-node" scope="external" format="html" >Click here to access the code repository.</xref>
</p>
</section>
<section id="about-the-application-files"> <title>About the Application Files</title>
  <p>To create a <tm tmtype="tm">Cloud Foundry</tm> app in Node.js, the only mandatory files are:</p>
<ul>
<li>The main .js file</li>
<li>manifest.yml</li>
<li>package.json</li>
<li>Procfile </li>
</ul>
<p>
<i>Manifest.yml</i> is a configuration file used to specify settings that would otherwise be specified by a command-line tool.</p>
<p>The <i>package.json</i> file is your standard metadata file. <b>Name</b> and <b>version</b> are the only required fields.</p>
<p>The <i>Procfile</i> tells the Helion Development Platform how to run your Node.js application. An extremely simple one is included with this sample.</p>
</section>
<section id="deploy-the-application"> <title>Deploy the Application</title>
<p>
<b>Note</b>: Application Lifecycle Service clusters that require an upstream HTTP proxy to access the internet will need to be <xref href="../../../devplatform/helion/admin/server/1.1configuration.dita#staging-cache-app-http-proxy" type="section"  >made aware of the proxy</xref>. The sample applications require access to the Internet in order to download dependent packages.</p>
<p>Use the Helion client to deploy your app to Helion Development Platform.</p>
<ol>
<li>Open the <xref href="../../../devplatform/helion/user/reference/1.1client-ref.dita" >Helion command-line interface (CLI)</xref>
</li>
<li>
<p>Ensure that you are targeting your desired environment.  <!--A BR tag was used here in the original source.--> If you are not, execute</p>

<codeblock>
<codeph>helion target https://api.xx.xx.xx.xx.xip.io    
</codeph>
</codeblock>
</li>
<li>
<p>Ensure that you are logged in to your desired environment.  <!--A BR tag was used here in the original source.-->If you are not, execute</p>

<codeblock>
<codeph>helion login
</codeph>
</codeblock>
</li>
<li>
<p>If you are not already there, <codeph>cd</codeph> to the root directory of the sample.</p>
</li>
<li>
<p>Deploy the application by using the command:</p>

<codeblock>
<codeph>helion push 
</codeph>
</codeblock>
</li>
<li>
<p>Accept any default values that you may be prompted for. <!--A BR tag was used here in the original source.--><b>Note</b>: By default, ALS Clusters are configured with two domains (private and public).  In some situations, the Helion CLI may prompt you to select a target domain.  If prompted, select the public domain from the given list (i.e. <i>&lt;app-name&gt;.xxx.xxx.xxx.xxx.xip.io</i>)</p>
</li>
</ol>
</section>
<section id="key-code-snippets"> <title>Key Code Snippets</title>
<p>This simple Servlet prints "Hello World".</p>
<codeblock>
  <codeph>// Load the http module 
var http = require('http');

// The  HTTP server will respond with Hello World to all requests.
var server = http.createServer(function (request, response) {
  response.writeHead(200, {"Content-Type": "text/plain"});
  response.end("\n Hello World \n");
});

// Listen to the port being used by this app. The call to process.env.PORT will
// return the port that has been assigned to the app from the Helion Development
// Platform.
var port = process.env.PORT || 8888;
server.listen(port);

// Print to the terminal
console.log("Server listening to port: " + port);
</codeph>
</codeblock>
<p>The <i>package.json</i> file is used by ALS during deployment. This is an extremely basic manifest file. 
Note that <b>name</b> is always required while other fields are optional.</p>
<codeblock>
  <codeph>    {
      "name": "hello-world-node",
      "version": "1.0.0",
      "description" : "A 'Hello World' app demonstrating Node.js running on the Helion Development Platform.",
      "repository" : {"type": "git", "url": "git://notyetpublished"}
    }
</codeph>
</codeblock>
</section>
<section id="run-the-application"> <title>Run the Application</title>
<ol>
<li>Open the Helion Management Console. <!--A BR tag was used here in the original source.--> The Management Console is the web-based administrative interface that can be reached by typing the ALS endpoint URL into a browser window.</li>
<li>Click <b>Applications</b>.</li>
<li>If the file push was successful, you should see <b>hello-world-node</b> in the list of available applications.</li>
<li>The status of the application should be <b>Started</b>.  Click the name of the application to launch it.</li>
<li>In the upper right-hand corner, click <b>View App</b>.</li>
<li>You should see a simple text message: <b>Hello World</b>
</li>
</ol>
</section>
<section id="key-learnings"> <title>Key Learnings</title>
<ul>
<li>
<p>You interact with and deploy your app using the <xref href="../../../devplatform/helion/user/reference/1.1client-ref.dita" >ALS command line client</xref> or the web-based <xref href="../../../devplatform/helion/user/console/1.1index.dita" >ALS Management Console</xref>.</p>
</li>
<li>
<p>ALS requires configuration information to create an environment for your app. Configuration information is contained in the <i>manifest.yml</i> file.</p>
</li>
</ul>
<p>
<xref href="../../../devplatform/1.1devplatform.appdev.dita" >Exit Samples</xref> | <xref href="../../../devplatform/workbook/messaging/1.1messaging.node.dita" >Previous Sample</xref> | <xref href="../../../devplatform/workbook/database/1.1database.node.dita" >Next Sample</xref>
</p>
</section>
</body>
</topic>
